<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Daily Report - Checking Goods</title>

<!-- Bootstrap CSS + Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<style>
@import url('https://fonts.googleapis.com/css2?family=Reem+Kufi+Fun:wght@400..700&display=swap');
body {
  font-size: 12px; margin: 0; padding: 10px;
  background: linear-gradient(135deg, #dce9f9 0%, #f0f4fa 100%);
  min-height: 100vh;
}
.glass-card {
  background: rgba(255,255,255,0.35);
  backdrop-filter: blur(10px); border-radius: 12px;
  box-shadow: 0 6px 20px rgba(0,0,0,0.08);
  border: 1px solid rgba(255,255,255,0.45);
  padding: 10px;
}
.glass-card .btn { font-size: 12px; font-weight: 600; transition: all .18s ease; }
.glass-card .btn:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.08); }

table { border: 1px solid #000; width: 100%; border-collapse: collapse; background-color: #fff; font-size: 12px;}
table th, table td { border: 1px solid #000 !important; text-align: center; vertical-align: middle; word-break: break-word;}
table th { background-color: #a0a0a0 !important; font-weight: bold; }
table td { font-weight: 600 !important; padding: 9.5px 3px !important; }
table input { width: 100%; border: none; text-align: center; font-size: 13px; font-weight: 600; padding: 2px; background-color: transparent;}

.col-no { width: 30px; } .col-name { width: 160px; } .col-code { width: 105px; } .col-invoice { width: 140px; } .col-items { width: 70px; } .col-qty { width: 50px; } .col-qty-5 { width: 90px; } .col-qty-wider { width: 80px; }

.header-info p { font-weight: bold; font-size: 13px; margin: 0; }
.header-info span[contenteditable] { border-bottom: 1px dotted #000; padding: 0 2px; min-width: 50px; display:inline-block; }
.signature { margin-top: 28px; width: 100%; display:flex; justify-content:flex-end; font-size:14px; }
.signature span { border-top:1px solid #000; padding-top:5px; display:inline-block; min-width:180px; text-align:center; }
.page-number { text-align:center; font-weight:bold; margin-bottom:5px; }
.no-print { margin:10px 0; }
.page-break { page-break-before: always; }
.autocomplete-list { position: absolute; border: 1px solid #ccc; background: #fff; z-index: 1000; max-height:150px; overflow-y:auto; }

#adminPanel {
  background: rgba(255,255,255,0.5); backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px); border-radius: 10px;
  border: 1px solid rgba(255,255,255,0.45);
  box-shadow: 0 6px 16px rgba(0,0,0,0.06);
  padding: 12px;
}

@media print {
  @page { size: A4 landscape; margin: 5mm; margin-top:42px; }
  body { margin: 0; padding: 0; background-color: white !important; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
  .no-print, .glass-card { display: none !important; }
  #entrySection { display: none !important; }
  table, th, td { background: #fff !important; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
  tr { page-break-inside: avoid; }
  table input { display: none; }
  .with-dash td:empty::after { content: "-"; display: block; }
  .flag-top-right { display: none; }
}
.flag-top-right { position: fixed; top: -3px; right: 15px; width: 100px; height: auto; z-index: 9999; pointer-events: none; }
.header-info #editableStore { margin-left: 8px !important; font-size: 19px; font-family: "Reem Kufi Fun", sans-serif; font-weight: bold; }
</style>
</head>
<body>

<img id="flag" src="/wao-removebg-preview.png" alt="Flag" class="flag-top-right">

<script>
const flag = document.getElementById("flag");
const flags = ["/wao-removebg-preview.png","/logo-removebg-preview.png"];
let current = 0;
function switchFlag() {
  flag.style.opacity = 0;
  setTimeout(() => {
    current = (current + 1) % flags.length;
    flag.src = flags[current];
    flag.style.opacity = 1;
  },2000);
}
setInterval(switchFlag, 1*60*1000);
</script>

<div class="container-fluid">

<div class="glass-card no-print mb-3 d-flex flex-wrap align-items-center gap-2 justify-content-start">
  <div class="btn-group">
    <button class="btn btn-success" onclick="saveSpecialist()"><i class="bi bi-save"></i> Save</button>
    <button class="btn btn-primary" onclick="generateCombinedReport()"><i class="bi bi-file-earmark-richtext"></i> Generate</button>
    <button class="btn btn-danger" onclick="clearAllSpecialists()"><i class="bi bi-trash"></i> Clear All</button>
  </div>
  <div class="btn-group">
    <button class="btn btn-secondary" onclick="window.print()"><i class="bi bi-printer"></i> Print</button>
  </div>
  <div class="btn-group">
    <button class="btn btn-warning" onclick="nextSet()"><i class="bi bi-plus-square"></i> Page +</button>
    <button class="btn btn-info" onclick="resetNumbers()"><i class="bi bi-arrow-repeat"></i> Reset</button>
  </div>
  <div class="btn-group">
    <button class="btn btn-outline-info" onclick="toggleAdminPanel()"><i class="bi bi-people"></i> Manage Suppliers</button>
  </div>
</div>

<div class="no-print">
  <div id="adminPanel" style="display:none; margin-top:10px;">
    <h6 class="fw-bold mb-2">Saved Suppliers</h6>
    <table class="table table-sm table-bordered mb-0">
      <thead><tr><th>Name</th><th>Code</th><th>Actions</th></tr></thead>
      <tbody id="adminTableBody"></tbody>
    </table>
  </div>
</div>

<div class="no-print">
  <div class="d-flex justify-content-between align-items-start mb-2">
    <div class="header-info">
      <p>Date : <span id="editableDate" contenteditable="true"></span></p>
      <p class="editableStore">Store location : <span id="editableStore" contenteditable="true">جدة</span></p>
      <p class="specialistNamePlaceholder">Quality specialist : <span id="specialistNamePlaceholder">—</span></p>
    </div>
    <div class="text-center flex-grow-1">
      <h6 class="fw-bold text-decoration-underline" style="font-size:13px; margin-top:10px;">
        Daily report of checking goods received from suppliers
      </h6>
    </div>
    <div class="text-end header-info">
      <p>Makhazen Alenayah</p>
      <p>Quality section</p>
    </div>
  </div>
  <div id="setInfo" class="page-number">Page 1</div>
</div>

<div class="table-responsive" id="entrySection">
  <table class="table table-bordered table-sm" id="reportTable">
    <thead>
      <tr>
        <th rowspan="3" class="col-no">No.</th>
        <th colspan="2">Supplier</th>
        <th colspan="3">Invoice</th>
        <th colspan="10">Notes</th>
      </tr>
      <tr>
        <th rowspan="2" class="col-name">Name</th>
        <th rowspan="2" class="col-code">Code</th>
        <th rowspan="2" class="col-invoice">Invoice number</th>
        <th rowspan="2" class="col-items">Items</th>
        <th rowspan="2" class="col-qty-5">Qty.</th>
        <th colspan="2" class="col-items">Exp.</th>
        <th colspan="2" class="col-items">Damage</th>
        <th colspan="2" class="col-items">Shortage in quantity</th>
        <th colspan="2" class="col-items">Arabic language</th>
        <th colspan="2" class="col-items">Others</th>
      </tr>
      <tr>
        <th class="col-items">Items</th><th class="col-qty">Qty.</th>
        <th class="col-items">Items</th><th class="col-qty">Qty.</th>
        <th class="col-items">Items</th><th class="col-qty">Qty.</th>
        <th class="col-items">Items</th><th class="col-qty">Qty.</th>
        <th class="col-items">Items</th><th class="col-qty-wider">Qty.</th>
      </tr>
    </thead>
    <tbody>
      <script>
        for (let i = 1; i <= 12; i++) {
          document.write('<tr>'+
            '<td>'+i+'</td>'+
            '<td><input type="text"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="text"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="number"></td>'+
            '<td><input type="text"></td>'+
          '</tr>');
        }
      </script>
    </tbody>
  </table>
</div>

<div id="combinedReports"></div>

<script>
// ------------------ Initialization ------------------
let currentSet = 0;
const editableDate = document.getElementById("editableDate");
const now = new Date();
editableDate.innerText = `${now.getDate()} ${now.toLocaleString('default',{month:'long'})} ${now.getFullYear()}`;

function updateNumbers() {
  document.querySelectorAll("#reportTable tbody tr").forEach((row, index) => {
    row.cells[0].innerText = index + 1 + (currentSet * 12);
  });
  document.getElementById("setInfo").innerText = `Page ${currentSet + 1}`;
}
function nextSet() { currentSet++; updateNumbers(); }
function resetNumbers() { currentSet = 0; updateNumbers(); }
function clearTable() { document.querySelectorAll("#reportTable tbody tr input").forEach(i=>i.value=""); }

// ------------------ Suppliers Storage ------------------
let suppliers = JSON.parse(localStorage.getItem("suppliers")) || {};
function saveSupplierPair(input) {
  const row = input.closest("tr");
  const name = row.cells[1].querySelector("input").value.trim();
  const code = row.cells[2].querySelector("input").value.trim();
  if(name && code){ suppliers[code]=name; localStorage.setItem("suppliers", JSON.stringify(suppliers)); refreshAdminPanel(); }
}
function autoFillFromNameOnBlur(input) {
  const row = input.closest("tr");
  const name = input.value.trim();
  const codeInput = row.cells[2].querySelector("input");
  const found = Object.entries(suppliers).find(([c,n])=>n.toLowerCase()===name.toLowerCase());
  if(found) codeInput.value=found[0];
  saveSupplierPair(input);
}
function autoFillFromCodeOnBlur(input){
  const row=input.closest("tr"); const code=input.value.trim();
  const nameInput=row.cells[1].querySelector("input");
  if(suppliers[code]) nameInput.value=suppliers[code];
  saveSupplierPair(input);
}
function toggleAdminPanel() { const panel=document.getElementById("adminPanel"); panel.style.display = panel.style.display==="none"?"block":"none"; refreshAdminPanel(); }
function refreshAdminPanel() { const tbody=document.getElementById("adminTableBody"); tbody.innerHTML=""; Object.entries(suppliers).forEach(([code,name])=>{ const tr=document.createElement("tr"); tr.innerHTML=`<td>${name}</td><td>${code}</td><td><button class="btn btn-sm btn-danger" onclick="deleteSupplier('${code}')">Delete</button></td>`; tbody.appendChild(tr); }); }
function deleteSupplier(code){ if(confirm("Delete supplier with code: "+code+"?")){ delete suppliers[code]; localStorage.setItem("suppliers", JSON.stringify(suppliers)); refreshAdminPanel(); } }

// ------------------ Specialists Storage ------------------
function saveSpecialist() {
  const rows = document.querySelectorAll("#reportTable tbody tr");
  let supplierRows = [], numbers=[];
  rows.forEach(row=>{ let rowData=[]; row.querySelectorAll("input").forEach(input=>rowData.push(input.value.trim())); supplierRows.push(rowData); numbers.push(row.cells[0].innerText); });

  if(!supplierRows.some(r=>r.some(v=>v!==""))) { alert("Enter at least one supplier."); return; }
  const specialistName = prompt("Enter Quality Specialist Name:"); if(!specialistName) return;
  document.getElementById("specialistNamePlaceholder").innerText = specialistName;
  const storeName = document.getElementById("editableStore").innerText.trim();
  const enteredDate = editableDate.innerText.trim();

  let storedData = JSON.parse(localStorage.getItem("specialistsData")) || [];
  storedData.push({name:specialistName, store:storeName, date:enteredDate, suppliers:supplierRows, numbers, page:currentSet+1});
  localStorage.setItem("specialistsData", JSON.stringify(storedData));
  alert(`Report saved for ${specialistName}`);
  clearTable();
  resetNumbers();

  // Send to Google Sheet
  sendToGoogleSheet({name:specialistName, store:storeName, date:enteredDate, suppliers:supplierRows, numbers, page:currentSet+1});
}

// ------------------ Google Sheet Integration ------------------
const GOOGLE_SHEET_URL = "https://script.google.com/macros/s/AKfycbw4Tpr_hZal9VXkigyw5ilDlnIAb4C8UbbczmTs5_kcnY9SyyyeFjnSb-JTmqrJKgipOA/exec"; // replace with your Apps Script URL
function sendToGoogleSheet(data){
  fetch(GOOGLE_SHEET_URL, {
    method:"POST",
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify(data)
  })
  .then(res=>res.text())
  .then(res=>console.log("Data sent to Google Sheet:", res))
  .catch(err=>console.error("Error sending data:", err));
}

// ------------------ Combined Report ------------------
function generateCombinedReport() {
    const container = document.getElementById("combinedReports");
    container.innerHTML = "";

    const specialistsData = JSON.parse(localStorage.getItem("specialistsData")) || [];
    if (!specialistsData.length) {
        alert("No saved specialists to generate report.");
        return;
    }

    specialistsData.forEach((spec, sIndex) => {
        if (sIndex > 0) container.innerHTML += '<div class="page-break"></div>';

        const pageDiv = document.createElement("div");
        pageDiv.innerHTML = `<div class="d-flex justify-content-between align-items-start mb-2">
            <div class="header-info">
                <p>Date: <span>${spec.date}</span></p>
                <p class="editableStore">Store location: <span id="editableStore">${spec.store}</span></p>
                <p class="specialistNamePlaceholder">Quality specialist: <span id="specialistNamePlaceholder">${spec.name}</span></p>
            </div>
            <div class="text-center flex-grow-1">
                <h6 class="fw-bold text-decoration-underline" style="font-size:13px; margin-top:10px;">
                    Daily report of checking goods received from suppliers
                </h6>
            </div>
            <div class="text-end header-info">
                <p>Makhazen Alenayah</p>
                <p>Quality section</p>
            </div>
        </div>
        <div class="page-number">Page ${spec.page}</div>
        <table class="table table-bordered table-sm">
            <thead>${document.querySelector("#reportTable thead").innerHTML}</thead>
            <tbody></tbody>
        </table>
        <div class="signature"><span>Signature</span></div>`;

        container.appendChild(pageDiv);
        const tbody = pageDiv.querySelector("tbody");

        spec.suppliers.forEach((rowData, idx) => {
            const sanitizedRow = rowData.map(v => v.trim() === "" ? "-" : v);
            const rowHTML = `<tr class="with-dash"><td>${spec.numbers[idx]}</td>` +
                sanitizedRow.map(v => `<td>${v}</td>`).join('') +
                `</tr>`;
            tbody.innerHTML += rowHTML;
        });
    });

    alert("Combined report generated! Each report will print on a separate page.");
}

// ------------------ Clear all ------------------
function clearAllSpecialists() {
  if(confirm("Clear ALL saved specialists’ reports?")) {
    localStorage.removeItem("specialistsData");
    clearTable();
    document.getElementById("combinedReports").innerHTML="";
    resetNumbers();
    alert("All Reports cleared.");
  }
}

// ------------------ Keyboard Navigation ------------------
document.addEventListener('keydown', function (e) {
  const active = document.activeElement;
  if (active && active.tagName==='INPUT' && active.closest('table')) {
    const cell = active.closest('td'); const row=cell.parentElement; const table=row.closest('table');
    const cellIndex = Array.from(row.children).indexOf(cell);
    const rowIndex = Array.from(table.tBodies[0].rows).indexOf(row);
    let targetInput=null;
    function inputIn(rowEl, idx){ const cellEl=rowEl?.cells[idx]; return cellEl?.querySelector('input') || null; }

    switch(e.key){
      case 'ArrowRight': for(let i=cellIndex+1;i<row.cells.length;i++){ const cand=inputIn(row,i); if(cand){targetInput=cand;break;} } break;
      case 'ArrowLeft': for(let i=cellIndex-1;i>=0;i--){ const cand=inputIn(row,i); if(cand){targetInput=cand;break;} } break;
      case 'ArrowDown': for(let r=rowIndex+1;r<table.tBodies[0].rows.length;r++){ const cand=inputIn(table.tBodies[0].rows[r],cellIndex); if(cand){targetInput=cand;break;} } break;
      case 'ArrowUp': for(let r=rowIndex-1;r>=0;r--){ const cand=inputIn(table.tBodies[0].rows[r],cellIndex); if(cand){targetInput=cand;break;} } break;
    }
    if(targetInput){targetInput.focus(); e.preventDefault();}
  }
});

// ------------------ Initialize admin panel ------------------
refreshAdminPanel();
</script>

</div>
</body>
</html>
